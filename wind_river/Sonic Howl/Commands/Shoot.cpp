// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


#include "Shoot.h"
#include <sstream>

Shoot::Shoot()
{
   // Use requires() here to declare subsystem dependencies
   // eg. requires(chassis);
   // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
   Requires(Robot::launcher);
   // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void Shoot::Initialize()
{
   _arm = RobotMap::pickupArm;
   _joystick = Robot::oi->getJoystick2();
   _shooting_wheels = RobotMap::launcherLauncherController;
   _higher_limit_switch = RobotMap::higherLimitSwitch;
   _sonar = RobotMap::sonar;

   Preferences *prefs = Preferences::GetInstance();
   _shoot_delay_count = prefs->GetInt("shoot-delay-count");
   _shoot_arm_speed = prefs->GetDouble("shoot-arm-speed", 0.5);
   _shoot_speed_low = prefs->GetDouble("shoot-speed-low", 0.3);
   _shoot_speed_med = prefs->GetDouble("shoot-speed-med", 0.5);
   _shoot_speed_high = prefs->GetDouble("shoot-speed-high", 0.9);
   _shoot_button_low = prefs->GetInt("shoot-button-low", 4);
   _shoot_button_med = prefs->GetInt("shoot-button-med", 5);
   _shoot_button_high = prefs->GetInt("shoot-button-high", 6);

   _shoot_count = 0;
   _shoot_speed = _shoot_speed_med; // SHOW THIS VALUE TO THE DRIVER!!!
}

// Called repeatedly when this Command is scheduled to run
void Shoot::Execute()
{
   /*
    if (_joystick->GetTrigger())
    {
    _shooting_wheels->Set((1 - _joystick->GetThrottle()) / 2);
    }
    else
    {
    _shooting_wheels->Set(0);
    }
    */

   int distance = _sonar->GetValue();
   SmartDashboard::PutNumber("Sonar", distance);

   // Shooting Speed
   if (_joystick->GetRawButton(_shoot_button_low))
   {
      _shoot_speed = _shoot_speed_low;
   }
   else if (_joystick->GetRawButton(_shoot_button_med))
   {
      _shoot_speed = _shoot_speed_med;
   }
   else if (_joystick->GetRawButton(_shoot_button_high))
   {
      _shoot_speed = _shoot_speed_high;
   }

   // Show the shoot speed in the Dashboard
   ShowShootingSpeed();

   // Actual Shooting
   bool shooting = _joystick->GetTrigger();
   if (shooting)
   {
      // Spin the wheels
      _shooting_wheels->Set(_shoot_speed);

      // Wait a fixed time and then move the arm
      if (_shoot_count++ > _shoot_delay_count && !_higher_limit_switch->Get())
      {
         // Shoot!
         _arm->Set(-_shoot_arm_speed);
      }
   }
   else
   {
      _shooting_wheels->Set(0);
      _shoot_count = 0;
   }

}

// Make this return true when this Command no longer needs to run execute()
bool Shoot::IsFinished()
{
   return false;
}

// Called once after isFinished returns true
void Shoot::End()
{

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Shoot::Interrupted()
{
}

// Show the shoot speed in the Dashboard
void Shoot::ShowShootingSpeed()
{
   if (_shoot_speed == _shoot_button_low)
   {
      SmartDashboard::PutString("Shooting Power", "low");
   }
   else if (_shoot_speed == _shoot_button_low)
   {
      SmartDashboard::PutString("Shooting Power", "Medium");
   }
   else if (_shoot_speed == _shoot_button_low)
   {
      SmartDashboard::PutString("Shooting Power", "HIGH");
   }
   else
   {
      std::ostringstream stream;
      stream << _shoot_speed;
      SmartDashboard::PutString("Shooting Power", stream.str());
   }
}
