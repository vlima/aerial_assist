// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Drive.h"

Drive::Drive()
{
   // Use requires() here to declare subsystem dependencies
   // eg. requires(chassis);
   // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
   Requires(Robot::chassis);
   // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void Drive::Initialize()
{
   _drive_stick = Robot::oi->getJoystick1();
   _left_front = RobotMap::chassisleft_front;
   _left_back = RobotMap::chassisleft_back;
   _right_front = RobotMap::chassisright_front;
   _right_back = RobotMap::chassisright_back;

}
// Called repeatedly when this Command is scheduled to run
void Drive::Execute()
{

   // Joystick
   _desired_out = WheelVector::calc(_drive_stick->GetX(), _drive_stick->GetY(), _drive_stick->GetTwist());
   _desired_out.zero(0.1);
   // Sensors
   //   WheelVector actual_out(-left_front_encoder.GetRate(), -left_back_encoder.GetRate(), -right_front_encoder.GetRate(),
   //         -right_back_encoder.GetRate());
   //   actual_out = actual_out * RAD_TO_NORMAL;
   //   // Error
   //   WheelVector error = desired_out - actual_out;
   //   // Feedback
   //   input = input + error * K;
   //   input.limit(1.0);
   // desired_out.correct(error, input, 0.1);
   // Controllers
   //   printf("left_front = %f\n", desired_out.getLeftFront());
   //   printf("left_back = %f\n", desired_out.getLeftBack());
   //   printf("right_front = %f\n", desired_out.getRightFront());
   //   printf("right_back = %f\n", desired_out.getRightBack());

   // Custom Drive
   _left_front->Set(_desired_out.getLeftFront());
   _left_back->Set(_desired_out.getLeftBack());
   _right_front->Set(_desired_out.getRightFront());
   _right_back->Set(_desired_out.getRightBack());

   // Tank Drive
   //   left_front->Set(-drive_stick->GetY());
   //   left_back->Set(-drive_stick->GetY());
   //   right_front->Set(drive_stick->GetTwist());
   //   right_back->Set(drive_stick->GetTwist());
   //   printf("x = %f, y = %f, z = %f, twist = %f, thorttle = %f\n",drive_stick->GetX(), 
   //		   drive_stick->GetY(GenericHID::kLeftHand), drive_stick->GetZ(),
   //		   drive_stick->GetTwist(),
   //		   drive_stick->GetThrottle());
}
// Make this return true when this Command no longer needs to run execute()
bool Drive::IsFinished()
{
   return false;
}
// Called once after isFinished returns true
void Drive::End()
{

}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Drive::Interrupted()
{
}
